var debug = require('./Debug.js');
var file = require('./FileAPI.js');

exports.createAlgorithm = function (){return createAlgorithm();}
function createAlgorithm()
{
	if (!file.exists('algorithms'))
		file.createDir('algorithms');

	var alg = [
		'','0,0\n0,1\n0/1,2/3\n0/1/2,3/4/5\n0/1/2/3,4/5/6/7\n0/1/2/3/4,5/6/7/8/9\n0/1/2/3/4/5,6/7/8/9/10/11\n0/1/2/3/4/5/6,7/8/9/10/11/12/13\n0/1/2/3/4/5/6/7,8/9/10/11/12/13/14/15\n0/1/2/3/4/5/6/7/8,9/10/11/12/13/14/15/16/17',
		'0,0,0,0\n0,0,1,1\n0,1,2,3\n0/1,2,3/4,5\n0/1,2/3,4/5,6/7\n0/1/2,3/4,5/6/7,8/9\n0/1/2,3/4/5,6/7/8,9/10/11\n0/1/2/3,4/5/6,7/8/9/10,11/12/13\n0/1/2/3,4/5/6/7,8/9/10/11,12/13/14/15\n0/1/2/3/4,5/6/7/8,9/10/11/12/13,14/15/16/17',
		'0,0,0,0,0,0\n0,0,0,1,1,1\n0,0,1,2,2,3\n0,1,2,3,4,5\n0/1,2,3,4/5,6,7\n0/1,2,3/4,5/6,7,8/9\n0/1,2/3,4/5,6/7,8/9,10/11\n0/1,2/3/4,5/6,7/8,9/10/11,12/13\n0/1/2,3/4,5/6/7,8/9/10,11/12,13/14/15\n0/1/2,3/4/5,6/7/8,9/10/11,12/13/14,15/16/17',
		'0,0,0,0,0,0,0,0\n0,0,0,0,1,1,1,1\n0,0,1,1,2,2,3,3\n0,0,1,2,3,3,4,5\n0,1,2,3,4,5,6,7\n0,1,2/3,4,5,6,7/8,9\n0/3,4,1,2/5,6/9,10,7,8/11\n0/4,5,1/3,2/6,7/11,12,8/10,9/13\n0/4,1/5,2/6,3/7,8/12,9/13,10/14,11/15\n0/5,1/6,2/4/7,3/8,9/14,10/15,11/13/16,12/17',
		'0,0,0,0,0,0,0,0,0,0\n0,0,0,0,0,1,1,1,1,1\n0,0,0,1,1,2,2,2,3,3\n0,0,1,2,2,3,3,4,5,5\n0,1,2,2,3,4,5,6,6,7\n0,1,2,3,4,5,6,7,8,9\n3,4,1,0,2/5,9,10,7,6,8/11\n0/4,5,1,3,2/6,7/11,12,8,10,9/13\n0/4,1/5,2,6,3/7,8/12,9/13,10,14,11/15\n0/5,1/6,4,2/7,3/8,9/14,10/15,13,11/16,12/17',
		'0,0,0,0,0,0,0,0,0,0,0,0\n0,0,0,0,0,0,1,1,1,1,1,1\n0,0,0,1,1,1,2,2,2,3,3,3\n0,0,1,1,2,2,3,3,4,4,5,5\n0,2,3,0,1,3,4,6,7,4,5,7\n3,2,4,0,1,4,8,7,9,5,6,9\n0,1,2,3,4,5,6,7,8,9,10,11\n0,1/3,2,4,5,6,7,8/10,9,11,12,13\n0,1/5,3,4,2/6,7,8,9/13,11,12,10/14,15\n0,1/6,3,5,2/4/7,8,9,10/15,12,14,11/13/16,17',
		'0,0,0,0,0,0,0,0,0,0,0,0,0,0\n0,0,0,0,0,0,0,1,1,1,1,1,1,1\n0,0,0,0,1,1,1,2,2,2,2,3,3,3\n0,0,1,1,1,2,2,3,3,4,4,4,5,5\n0,2,3,2,0,1,3,4,6,7,6,4,5,7\n0,2,4,3,0,1,4,5,7,9,8,5,6,9\n0,1,2,1,3,4,5,6,7,8,7,9,10,11\n0,1,2,3,4,5,6,7,8,9,10,11,12,13\n0,1/5,3,4,2,6,7,8,9/13,11,12,10,14,15\n0,1/6,3,4,5,2/7,8,9,10/15,12,13,14,11/16,17',
		'0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1\n0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3\n0,0,0,1,1,2,2,2,3,3,3,4,4,5,5,5\n0,1,2,3,0,1,2,3,4,5,6,7,4,5,6,7\n0,1,2,4,0,1,3,4,5,6,7,9,5,6,8,9\n0,1,4,2,3,1,4,5,6,7,10,8,9,7,10,11\n0,1,4,2,3,1,5,6,7,8,11,9,10,8,12,13\n0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n0,1,2/4,3,5,6,7,8,9,10,11/13,12,14,15,16,17',
	'0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1\n0,0,0,0,0,1,1,1,1,2,2,2,2,2,3,3,3,3\n0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5\n0,1,2,3,2,0,1,2,3,4,5,6,7,6,4,5,6,7\n0,1,3,4,2,0,1,3,4,5,6,8,9,7,5,6,8,9\n0,1,4,2,4,3,1,4,5,6,7,10,8,10,9,7,10,11\n0,1,5,2,3,4,1,5,6,7,8,12,9,10,11,8,12,13\n0,1,2,3,2,4,5,6,7,8,9,10,11,10,12,13,14,15\n0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17'
	];
	for (i = 1; i < alg.length; i++)
		if (!file.exists('algorithms/' + i + 'key.txt'))
		{
			debug.warn('Not found a ' + i + ' key algorithm, creating new...');
			file.saveFile('algorithms/' + i + 'key.txt', alg[i]);
		}
}

exports.alg = function (from_key, to_key)
{
	createAlgorithm();

	try {
		var alg = file.parseTXT('algorithms/' + from_key + 'key.txt');
		var alg2 = alg[to_key].split(',');
		var alg3 = [];
		for (i = 0; i < alg2.length; i++)
			alg3[i] = alg2[i].split('/');
		return alg3;
	}
	catch (e) {
		debug.warn('A problem occurred in parsing algorithm, trying alternative method...');
		var res = [];
		for (let i = 0; i < from_key * 2; i++)
			res[i] = [];

		if (from_key > to_key)
		{
			var ha = parseInt(from_key / to_key);

			// bf
			var num = 0;
			var num1 = 0;
			var num2 = 0;
			for (let i = 0; i < from_key; i++)
			{
				if (num > ha - 1)
				{
					num = 0;
					num1 = i;
					if (num2 < to_key - 1)
						num2++;
				}
				
				res[num + num1] = num2;
				num++;
			}

			// opponent
			num = 0;
			num1 = 0;
			num2 = to_key;
			for (let i = 0; i < from_key; i++)
			{
				if (num > ha - 1)
				{
					num = 0;
					num1 = i;
					if (num2 < to_key * 2 - 1)
						num2++;
				}
				
				res[from_key + num + num1] = num2;
				num++;
			}
		}
		else // with using random things
		{
			// bf
			var num = 0;
			for (let i = 0; i < to_key; i++)
			{
				if (num > from_key - 1)
					num = 0;
				res[num].push(i);
				num++;
			}

			// opponent
			num = 0;
			for (let i = 0; i < to_key; i++)
			{
				if (num > from_key - 1)
					num = 0;
				res[from_key + num].push(to_key + i);
				num++;
			}
		}
		//console.log(res)
		return res;
	}
}

exports.algLength = function ()
{
	createAlgorithm();

	return 512; // 512 is theoretical limit for osu mania i think

	/*var dir_primary = file.readDir('algorithms');
	var dir = [];
	var int = 0;

	for (i = 0; i < dir_primary.length; i++)
		if (dir_primary[i].endsWith('key.txt'))
		{
			dir[int] = dir_primary[i];
			int++;
		}

	return dir.length;*/
}